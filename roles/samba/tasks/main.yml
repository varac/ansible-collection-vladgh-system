---
- name: Gather variables for each operating system
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution | lower }}.yml"
    - "{{ ansible_os_family | lower }}.yml"

- name: Install Samba packages
  ansible.builtin.package:
    name: "{{ samba_packages }}"
    state: present
  when: samba_vfs_packages is defined and samba_vfs_packages
  tags: samba

- name: Install Samba VFS extensions packages
  ansible.builtin.package:
    name: "{{ samba_vfs_packages }}"
    state: present
  when: samba_vfs_packages is defined and samba_vfs_packages
  tags: samba

- name: Create Samba shares root directory
  ansible.builtin.file:
    state: directory
    path: "{{ samba_shares_root }}"
    owner: root
    group: root
    mode: 0755
  when: >
    ( samba_shares_root is defined and samba_shares_root ) and
    ( samba_shares is defined and samba_shares )
  tags: samba

- name: Create share directories
  ansible.builtin.file:
    state: directory
    path: "{{ item.path | default([samba_shares_root, item.name] | join('/')) }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('users') }}"
    mode: "{{ item.directory_mode | default('0775') }}"
  loop: "{{ samba_shares }}"
  when: samba_shares is defined and samba_shares
  tags: samba

- name: Samba configuration
  ansible.builtin.template:
    dest: "{{ samba_configuration }}"
    src: etc/samba/smb.conf.j2
    validate: 'testparm -s %s'
    mode: 0644
  notify:
    - Restart Samba services
  tags: samba

- name: Install global include file
  ansible.builtin.template:
    src: "{{ samba_global_include }}"
    dest: "{{ samba_configuration_dir }}"
    validate: 'testparm -s %s'
    mode: 0644
  when: samba_global_include is defined and samba_global_include
  notify:
    - Restart Samba services
  tags: samba

- name: Install home include file
  ansible.builtin.template:
    src: "{{ samba_homes_include }}"
    dest: "{{ samba_configuration_dir }}"
    validate: 'testparm -s %s'
    mode: 0644
  when: samba_homes_include is defined and samba_homes_include
  notify:
    - Restart Samba services
  tags: samba

- name: Install share specific include files
  ansible.builtin.template:
    src: "{{ item.include_file }}"
    dest: "{{ samba_configuration_dir }}"
    validate: 'testparm -s %s'
    mode: 0644
  when: item.include_file is defined and item.include_file
  loop: "{{ samba_shares }}"
  notify:
    - Restart Samba services
  tags: samba

- name: Create username map file if needed
  ansible.builtin.template:
    dest: "{{ samba_username_map_file }}"
    src: etc/samba/smbusers.j2
    mode: 0644
  notify:
    - Restart Samba services
  when: samba_username_map is defined and samba_username_map
  tags: samba

- name: Start Samba service(s)
  ansible.builtin.service:
    name: "{{ item }}"
    state: started
    enabled: true
  loop: "{{ samba_services }}"
  tags: samba

- name: Create Samba users if they don't exist yet
  ansible.builtin.shell: >
    set -o nounset -o pipefail -o errexit &&
    (pdbedit --user={{ item.name }} 2>&1 > /dev/null) \
    || (echo '{{ item.password }}'; echo '{{ item.password }}') \
    | smbpasswd -s -a {{ item.name }}
  args:
    executable: /bin/bash
  loop: "{{ samba_users }}"
  no_log: true
  register: create_user_output
  changed_when: "'Added user' in create_user_output.stdout"
  tags: samba
